// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     user_email_confirmation_resent.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type UserEmailConfirmationResent struct {
	Uuid string `json:"uuid"`

	Email string `json:"email"`

	Created_at int64 `json:"created_at"`
}

const UserEmailConfirmationResentAvroCRC64Fingerprint = "g\xb45K\xabPR\xac"

func NewUserEmailConfirmationResent() UserEmailConfirmationResent {
	r := UserEmailConfirmationResent{}
	return r
}

func DeserializeUserEmailConfirmationResent(r io.Reader) (UserEmailConfirmationResent, error) {
	t := NewUserEmailConfirmationResent()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeUserEmailConfirmationResentFromSchema(r io.Reader, schema string) (UserEmailConfirmationResent, error) {
	t := NewUserEmailConfirmationResent()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeUserEmailConfirmationResent(r UserEmailConfirmationResent, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Uuid, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Email, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.Created_at, w)
	if err != nil {
		return err
	}
	return err
}

func (r UserEmailConfirmationResent) Serialize(w io.Writer) error {
	return writeUserEmailConfirmationResent(r, w)
}

func (r UserEmailConfirmationResent) Schema() string {
	return "{\"fields\":[{\"name\":\"uuid\",\"type\":\"string\"},{\"name\":\"email\",\"type\":\"string\"},{\"name\":\"created_at\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}}],\"name\":\"events.user.UserEmailConfirmationResent\",\"type\":\"record\"}"
}

func (r UserEmailConfirmationResent) SchemaName() string {
	return "events.user.UserEmailConfirmationResent"
}

func (_ UserEmailConfirmationResent) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ UserEmailConfirmationResent) SetInt(v int32)       { panic("Unsupported operation") }
func (_ UserEmailConfirmationResent) SetLong(v int64)      { panic("Unsupported operation") }
func (_ UserEmailConfirmationResent) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ UserEmailConfirmationResent) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ UserEmailConfirmationResent) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ UserEmailConfirmationResent) SetString(v string)   { panic("Unsupported operation") }
func (_ UserEmailConfirmationResent) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *UserEmailConfirmationResent) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Uuid}

		return w

	case 1:
		w := types.String{Target: &r.Email}

		return w

	case 2:
		w := types.Long{Target: &r.Created_at}

		return w

	}
	panic("Unknown field index")
}

func (r *UserEmailConfirmationResent) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *UserEmailConfirmationResent) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ UserEmailConfirmationResent) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ UserEmailConfirmationResent) AppendArray() types.Field { panic("Unsupported operation") }
func (_ UserEmailConfirmationResent) HintSize(int)             { panic("Unsupported operation") }
func (_ UserEmailConfirmationResent) Finalize()                {}

func (_ UserEmailConfirmationResent) AvroCRC64Fingerprint() []byte {
	return []byte(UserEmailConfirmationResentAvroCRC64Fingerprint)
}

func (r UserEmailConfirmationResent) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["uuid"], err = json.Marshal(r.Uuid)
	if err != nil {
		return nil, err
	}
	output["email"], err = json.Marshal(r.Email)
	if err != nil {
		return nil, err
	}
	output["created_at"], err = json.Marshal(r.Created_at)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *UserEmailConfirmationResent) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["uuid"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Uuid); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for uuid")
	}
	val = func() json.RawMessage {
		if v, ok := fields["email"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Email); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for email")
	}
	val = func() json.RawMessage {
		if v, ok := fields["created_at"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Created_at); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for created_at")
	}
	return nil
}
